@startuml

abstract class Cliente <<abstract>> {
  - numeroTelefono: String
  - nombre: String

  + <<create>> Cliente(nombre: String, numeroTelefono: String)
  + <s>registrarLlamada(destino: Cliente, tipo: String, duracion: Integer): Llamada
  - _registrarLlamada(llamada: Llamada): Llamada
  + registrarLlamadaNacional(destino: Cliente, duracion: Integer): Llamada
  + registrarLlamadaInternacional(destino: Cliente, duracion: Integer): Llamada
  + calcularMontoTotalLlamadas(): Real
  - calcularMontoTotalLlamada(llamada: Llamada): Real
  # {abstract} <<abstract>> getDescuento(): Real
  + getNombre(): String
  + <s>setNombre(nombre: String)
  + getNumeroTelefono(): String
  + <s>setNumeroTelefono(numeroTelefono: String)
}


class ClienteFisico {
  - dni: String

  + <<create>> ClienteFisico(nombre: String, numeroTelefono: String, dni: String)
  # getDescuento(): Real
  + getDni(): String
  + <s>setDni(dni: String)
}


class ClienteJuridico {
  - cuit: String

  + <<create>> ClienteJuridico(nombre: String, numeroTelefono: String, cuit: String)
  # getDescuento(): Real
  + getCuit(): String
  + <s>setCuit(cuit: String)
}


class Empresa {
  + <s>agregarNumeroTelefono(str: String): Boolean
  + <s>obtenerNumeroLibre(): String
  + <s>registrarUsuario(data: String, nombre: String, tipo: String): Cliente
  - registrarCliente(cliente: Cliente): Cliente
  + registrarClienteFisico(nombre: String, dni: String): Cliente
  + registrarClienteJuridico(nombre: String, cuit: String): Cliente
  + <s>registrarLlamada(origen: Cliente, destino: Cliente, tipo: String, duracion: Integer): Llamada
  + <s>calcularMontoTotalLlamadas(cliente: Cliente): Real
  + cantidadDeUsuarios(): Integer
  + existeUsuario(persona: Cliente): Boolean
  + getGestorNumeros(): GestorNumerosDisponibles
}


class GestorNumerosDisponibles {
  - lineas: String[*]

  + getLineas(): String[*]
  + agregarNumeroTelefono(str: String): Boolean
  + popNumeroLibre(): String
  + <s>cambiarTipoGenerador(valor: String)
  + cambiarTipoGenerador(generador: GeneradorStrategy)
}


interface GeneradorStrategy <<interface>> {
  + obtenerNumeroLibre(lineas: String[*]): String
}


class GeneradorPrimeroStrategy {
  + obtenerNumeroLibre(lineas: String[*]): String
}


class GeneradorRandomStrategy {
  + obtenerNumeroLibre(lineas: String[*]): String
}


class GeneradorUltimoStrategy {
  + obtenerNumeroLibre(SortedSet<String>): String
}


abstract class Llamada <<abstract>> {
  - origen: String
  - destino: String
  - duracion: Integer
  - {static} IVA: Real

  + <<create>> Llamada(origen: String, destino: String, duracion: Integer)
  + calcularMonto(): Real
  # {abstract} <<abstract>> getCostoPorSegundo(): Real
  # {abstract} <<abstract>> getCostoAdicional(): Real
  + getRemitente(): String
  + getDuracion(): Integer
  + getOrigen(): String
}


class LlamadaInternacional {
  + <<create>> LlamadaInternacional(origen: String, destino: String, duracion: Integer)
  # getCostoPorSegundo(): Real
  # getCostoAdicional(): Real
}


class LlamadaNacional {
  + <<create>>LlamadaNacional(origen: String, destino: String, duracion: Integer)
  # getCostoPorSegundo(): Real
  # getCostoAdicional(): Real
}


Empresa "1" --> "*" Cliente : - clientes
Empresa "1" --> "1" GestorNumerosDisponibles : - guia

Llamada "*" <- "1" Cliente : + llamadas

Cliente <|-- ClienteFisico
Cliente <|-- ClienteJuridico

GeneradorStrategy <|.. GeneradorPrimeroStrategy
GeneradorStrategy <|.. GeneradorRandomStrategy
GeneradorStrategy <|.. GeneradorUltimoStrategy

GestorNumerosDisponibles -> GeneradorStrategy : - generador

Llamada <|-- LlamadaNacional
Llamada <|-- LlamadaInternacional

@enduml
